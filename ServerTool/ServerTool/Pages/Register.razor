@page "/register"

@using DatabaseLib
@using System.Security.Cryptography
@using System.Text

@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IUsersData _db

<EditForm Model="@user" OnValidSubmit="@InsertUser">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pb-4 border">
            <div class="mb-3 text-center">
                <h3>회원가입</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <input @bind="user.Email" class="form-control" placeholder="Input your E-mail" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <input @bind="user.Password" class="form-control" type="password" placeholder="Input your password" />
            </div>
            <div class="mb-3">
                <label>Confirm Password</label>
                <input @bind="confirmPassword" class="form-control" type="password" placeholder="Input your password" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <input type="submit" class="btn btn-primary" value="Register" />
            </div>
        </div>
    </div>
</EditForm>


@code {
    private DisplayUserModel user = new DisplayUserModel();
    private string confirmPassword = string.Empty;

    protected override Task OnInitializedAsync()
    {
        user = new DisplayUserModel();
        confirmPassword = string.Empty;

        return base.OnInitializedAsync();
    }
    private async Task InsertUser()
    {
        if (user.Password != confirmPassword)
        {
            await JsRuntime.InvokeVoidAsync("alert", "2차 비밀번호가 다릅니다");
            return;
        }

        var newPassword = Encrypt(user.Password);

        Users newUser = new Users
        {
            Email = user.Email,
            Password = newPassword,
        };

        var result = await _db.InsertUsers(newUser);

        if (result)
        {
            user = new DisplayUserModel();
            confirmPassword = string.Empty;

            await JsRuntime.InvokeVoidAsync("alert", "회원가입 성공!");

            NavManager.NavigateTo("/");
        }
    }

    private static string ComputeMd5Hash(string message)
    {
        MD5 md5 = MD5.Create();
        byte[] input = Encoding.ASCII.GetBytes(message);
        byte[] hash = md5.ComputeHash(input);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < hash.Length; i++)
        {
            sb.Append(hash[i].ToString("X2"));
        }
        return sb.ToString();
    }

    private static string SHA256Hash(string data)
    {
        SHA256 sha = new SHA256Managed();
        byte[] hash = sha.ComputeHash(Encoding.ASCII.GetBytes(data));
        StringBuilder stringBuilder = new StringBuilder();

        foreach (byte b in hash)
        {
            stringBuilder.AppendFormat("{0:x2}", b);
        }

        return stringBuilder.ToString();
    }

    private static string Encrypt(string password)
    {
        var md5Password = ComputeMd5Hash(password);

        return SHA256Hash(md5Password);
    }
}
