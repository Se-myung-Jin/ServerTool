@page "/Login"

@using DatabaseLib

@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IUsersData _db

<EditForm Model="@user" OnValidSubmit="@GetUser">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pb-4 border">
            <div class="mb-3 text-center">
                <h3>로그인</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <input @bind="user.Email" class="form-control" placeholder="Input your E-mail" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <input @bind="user.Password" class="form-control" type="password" placeholder="Input your password" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <input type="submit" class="btn btn-primary" value="로그인" />
            </div>
        </div>
    </div>
</EditForm>


@code {
    private DisplayUserModel user = new DisplayUserModel();

    private async Task GetUser()
    {
        Users newUser = new Users
        {
            Email = user.Email,
            Password = user.Password,
        };

        var result = await _db.SelectUser(newUser);

        if (null == result)
        {
            await JsRuntime.InvokeVoidAsync("alert", "아이디와 비밀번호를 다시 확인해주세요");
        }

        if (null != result)
        {
            if (result.Locked)
            {
                await JsRuntime.InvokeVoidAsync("alert", "잠겨있는 계정입니다. 관리자에게 문의하세요");
            }
            else if (result.Confirmed)
            {
                await JsRuntime.InvokeVoidAsync("alert", "허가되지 않은 계정입니다. 관리자에게 문의하세요");
            }
            else
            {
                user = new DisplayUserModel();

                await JsRuntime.InvokeVoidAsync("alert", "로그인 성공");

                NavManager.NavigateTo("/");
            }
        }
    }
}
